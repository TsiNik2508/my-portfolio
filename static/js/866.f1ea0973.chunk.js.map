{"version":3,"file":"static/js/866.f1ea0973.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","components/AboutSection/AboutSection.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { useState, useCallback, memo, useMemo, forwardRef } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { motion } from 'framer-motion';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport './AboutSection.scss';\r\n\r\nconst DescriptionBase = forwardRef(function Description({ inView, delay, children }, ref) {\r\n  return (\r\n    <motion.p\r\n      ref={ref}\r\n      className=\"about-section__description\"\r\n      initial={{ opacity: 0, y: 20, scale: 0.95 }}\r\n      animate={inView ? { opacity: 1, y: 0, scale: 1 } : {}}\r\n      transition={{ duration: 0.8, delay, ease: \"easeInOut\" }}\r\n      style={{ marginBottom: '20px' }}\r\n    >\r\n      {children}\r\n    </motion.p>\r\n  );\r\n});\r\nconst Description = memo(DescriptionBase);\r\n\r\nconst TechCloud = memo(({ positions, onMouseDown }) => (\r\n  <div className=\"about-section__cloud\">\r\n    {Object.keys(positions).map((tech) => (\r\n      <span\r\n        key={tech}\r\n        className={`tech tech--${tech.toLowerCase()}`}\r\n        style={{\r\n          transform: `translate(${positions[tech].x}px, ${positions[tech].y}px)`,\r\n          cursor: 'grab',\r\n        }}\r\n        onMouseDown={(e) => onMouseDown(e, tech)}\r\n      >\r\n        {tech}\r\n      </span>\r\n    ))}\r\n  </div>\r\n));\r\n\r\nconst AboutSection = () => {\r\n  const { t } = useTranslation();\r\n  \r\n  const initialPositions = useMemo(() => ({\r\n    HTML: { x: 0, y: 0 },\r\n    CSS: { x: 0, y: 0 },\r\n    JavaScript: { x: 0, y: 0 },\r\n    React: { x: 0, y: 0 },\r\n    Node: { x: 0, y: 0 },\r\n    Git: { x: 0, y: 0 },\r\n    API: { x: 0, y: 0 },\r\n    UX: { x: 0, y: 0 },\r\n  }), []);\r\n\r\n  const [positions, setPositions] = useState(initialPositions);\r\n\r\n  const handleMouseDown = useCallback((event, tech) => {\r\n    const startX = event.clientX - positions[tech].x;\r\n    const startY = event.clientY - positions[tech].y;\r\n\r\n    const handleMouseMove = (moveEvent) => {\r\n      const newX = moveEvent.clientX - startX;\r\n      const newY = moveEvent.clientY - startY;\r\n      setPositions((prevPositions) => ({\r\n        ...prevPositions,\r\n        [tech]: { x: newX, y: newY },\r\n      }));\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  }, [positions]);\r\n\r\n  // Настройки для анимации появления при скролле\r\n  const { ref: descriptionRef1, inView: inView1 } = useInView({ triggerOnce: true });\r\n  const { ref: descriptionRef2, inView: inView2 } = useInView({ triggerOnce: true });\r\n  const { ref: descriptionRef3, inView: inView3 } = useInView({ triggerOnce: true });\r\n  const { ref: descriptionRef4, inView: inView4 } = useInView({ triggerOnce: true });\r\n\r\n  return (\r\n    <section className=\"about-section\">\r\n      <h2 className=\"about-section__title\">\r\n        {t('aboutSection.titlePart1')} <span className=\"highlight\">{t('aboutSection.titlePart2')}</span>\r\n      </h2>\r\n      <div className=\"about-section__content\">\r\n        <div className=\"about-section__text\">\r\n          <Description ref={descriptionRef1} inView={inView1} delay={0}>\r\n            {t('aboutSection.description1')}\r\n          </Description>\r\n          <Description ref={descriptionRef2} inView={inView2} delay={0.3}>\r\n            {t('aboutSection.description2')} <span className=\"highlight italic\">{t('aboutSection.HTML_CSS_JS')}</span>.\r\n          </Description>\r\n          <Description ref={descriptionRef3} inView={inView3} delay={0.6}>\r\n            {t('aboutSection.description3')} <span className=\"highlight\">{t('aboutSection.webApplications')}</span>.\r\n          </Description>\r\n          <Description ref={descriptionRef4} inView={inView4} delay={0.9}>\r\n            {t('aboutSection.description4')} <span className=\"highlight\">{t('aboutSection.node')}</span> {t('aboutSection.and')} <span className=\"highlight\">{t('aboutSection.react')}</span>.\r\n          </Description>\r\n        </div>\r\n        <TechCloud positions={positions} onMouseDown={handleMouseDown} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default memo(AboutSection);\r\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","DescriptionBase","forwardRef","_ref","children","_jsx","motion","p","className","initial","opacity","y","scale","animate","transition","duration","ease","style","marginBottom","Description","memo","TechCloud","_ref2","positions","onMouseDown","tech","toLowerCase","transform","x","cursor","e","AboutSection","t","useTranslation","initialPositions","useMemo","HTML","CSS","JavaScript","Node","Git","API","UX","setPositions","useState","handleMouseDown","useCallback","event","startX","clientX","startY","clientY","handleMouseMove","moveEvent","newX","newY","prevPositions","handleMouseUp","document","removeEventListener","addEventListener","descriptionRef1","inView1","descriptionRef2","inView2","descriptionRef3","inView3","descriptionRef4","inView4","_jsxs"],"sourceRoot":""}